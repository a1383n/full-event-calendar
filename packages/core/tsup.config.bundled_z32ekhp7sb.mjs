// tsup.config.ts
import { defineConfig } from 'tsup'
import { sassPlugin } from 'esbuild-sass-plugin'
import * as preset from 'tsup-preset-solid'
var preset_options = {
  // array or single object
  entries: [
    // default entry (index)
    {
      // entries with '.tsx' extension will have `solid` export condition generated
      entry: 'src/index.tsx',
      // set `true` or pass a specific path to generate a development-only entry
      dev_entry: 'src/dev.tsx',
      // set `true` or pass a specific path to generate a server-only entry
      server_entry: true
    },
    {
      // non-default entries with "index" filename should have a name specified
      name: 'additional',
      entry: 'src/additional/index.ts',
      dev_entry: true
    },
    {
      entry: 'src/shared.ts'
    }
  ],
  // Set to `true` to remove all `console.*` calls and `debugger` statements in prod builds
  drop_console: true,
  // Set to `true` to generate a CommonJS build alongside ESM
  cjs: false,
  esbuild_plugins: [sassPlugin()]
}
var tsup_config_default = defineConfig((config) => {
  const watching = !!config.watch
  const parsed_data = preset.parsePresetOptions(preset_options, watching)
  if (!watching) {
    const package_fields = preset.generatePackageExports(parsed_data)
    console.log(`
package.json: 
${JSON.stringify(package_fields, null, 2)}

`)
    preset.writePackageJson(package_fields)
  }
  return preset.generateTsupOptions(parsed_data)
})
export { tsup_config_default as default }
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidHN1cC5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9faW5qZWN0ZWRfZmlsZW5hbWVfXyA9IFwiQzpcXFxcVXNlcnNcXFxcQU1JUktJQU5BRExcXFxcRGVza3RvcFxcXFxwcm9qZWN0c1xcXFxjYWxlbmRhci12aWV3XFxcXHBhY2thZ2VzXFxcXGNvcmVcXFxcdHN1cC5jb25maWcudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiQzpcXFxcVXNlcnNcXFxcQU1JUktJQU5BRExcXFxcRGVza3RvcFxcXFxwcm9qZWN0c1xcXFxjYWxlbmRhci12aWV3XFxcXHBhY2thZ2VzXFxcXGNvcmVcIjtjb25zdCBfX2luamVjdGVkX2ltcG9ydF9tZXRhX3VybF9fID0gXCJmaWxlOi8vL0M6L1VzZXJzL0FNSVJLSUFOQURML0Rlc2t0b3AvcHJvamVjdHMvY2FsZW5kYXItdmlldy9wYWNrYWdlcy9jb3JlL3RzdXAuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndHN1cCdcbmltcG9ydCB7IHNhc3NQbHVnaW4gfSBmcm9tICdlc2J1aWxkLXNhc3MtcGx1Z2luJ1xuaW1wb3J0ICogYXMgcHJlc2V0IGZyb20gJ3RzdXAtcHJlc2V0LXNvbGlkJ1xuXG5jb25zdCBwcmVzZXRfb3B0aW9uczogcHJlc2V0LlByZXNldE9wdGlvbnMgPSB7XG4gICAgLy8gYXJyYXkgb3Igc2luZ2xlIG9iamVjdFxuICAgIGVudHJpZXM6IFtcbiAgICAgICAgLy8gZGVmYXVsdCBlbnRyeSAoaW5kZXgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGVudHJpZXMgd2l0aCAnLnRzeCcgZXh0ZW5zaW9uIHdpbGwgaGF2ZSBgc29saWRgIGV4cG9ydCBjb25kaXRpb24gZ2VuZXJhdGVkXG4gICAgICAgICAgICBlbnRyeTogJ3NyYy9pbmRleC50c3gnLFxuICAgICAgICAgICAgLy8gc2V0IGB0cnVlYCBvciBwYXNzIGEgc3BlY2lmaWMgcGF0aCB0byBnZW5lcmF0ZSBhIGRldmVsb3BtZW50LW9ubHkgZW50cnlcbiAgICAgICAgICAgIGRldl9lbnRyeTogJ3NyYy9kZXYudHN4JyxcbiAgICAgICAgICAgIC8vIHNldCBgdHJ1ZWAgb3IgcGFzcyBhIHNwZWNpZmljIHBhdGggdG8gZ2VuZXJhdGUgYSBzZXJ2ZXItb25seSBlbnRyeVxuICAgICAgICAgICAgc2VydmVyX2VudHJ5OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBub24tZGVmYXVsdCBlbnRyaWVzIHdpdGggXCJpbmRleFwiIGZpbGVuYW1lIHNob3VsZCBoYXZlIGEgbmFtZSBzcGVjaWZpZWRcbiAgICAgICAgICAgIG5hbWU6ICdhZGRpdGlvbmFsJyxcbiAgICAgICAgICAgIGVudHJ5OiAnc3JjL2FkZGl0aW9uYWwvaW5kZXgudHMnLFxuICAgICAgICAgICAgZGV2X2VudHJ5OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBlbnRyeTogJ3NyYy9zaGFyZWQudHMnLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgLy8gU2V0IHRvIGB0cnVlYCB0byByZW1vdmUgYWxsIGBjb25zb2xlLipgIGNhbGxzIGFuZCBgZGVidWdnZXJgIHN0YXRlbWVudHMgaW4gcHJvZCBidWlsZHNcbiAgICBkcm9wX2NvbnNvbGU6IHRydWUsXG4gICAgLy8gU2V0IHRvIGB0cnVlYCB0byBnZW5lcmF0ZSBhIENvbW1vbkpTIGJ1aWxkIGFsb25nc2lkZSBFU01cbiAgICBjanM6IGZhbHNlLFxuICAgICdlc2J1aWxkX3BsdWdpbnMnIDpbc2Fzc1BsdWdpbigpXVxuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoY29uZmlnID0+IHtcbiAgY29uc3Qgd2F0Y2hpbmcgPSAhIWNvbmZpZy53YXRjaFxuXG4gIGNvbnN0IHBhcnNlZF9kYXRhID0gcHJlc2V0LnBhcnNlUHJlc2V0T3B0aW9ucyhwcmVzZXRfb3B0aW9ucywgd2F0Y2hpbmcpXG5cbiAgaWYgKCF3YXRjaGluZykge1xuICAgICAgY29uc3QgcGFja2FnZV9maWVsZHMgPSBwcmVzZXQuZ2VuZXJhdGVQYWNrYWdlRXhwb3J0cyhwYXJzZWRfZGF0YSlcblxuICAgICAgY29uc29sZS5sb2coYFxcbnBhY2thZ2UuanNvbjogXFxuJHtKU09OLnN0cmluZ2lmeShwYWNrYWdlX2ZpZWxkcywgbnVsbCwgMil9XFxuXFxuYClcblxuICAgICAgLypcbiAgICAgICAgICB3aWxsIHVwZGF0ZSAuL3BhY2thZ2UuanNvbiB3aXRoIHRoZSBjb3JyZWN0IGV4cG9ydCBmaWVsZHNcbiAgICAgICovXG4gICAgICBwcmVzZXQud3JpdGVQYWNrYWdlSnNvbihwYWNrYWdlX2ZpZWxkcylcbiAgfVxuXG4gIHJldHVybiBwcmVzZXQuZ2VuZXJhdGVUc3VwT3B0aW9ucyhwYXJzZWRfZGF0YSlcbn0pXG5cbi8vIGV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4vLyAgIGZvcm1hdDogWydjanMnLCAnZXNtJ10sXG4vLyAgIC8vQHRzLWlnbm9yZVxuLy8gICBlc2J1aWxkUGx1Z2luczogW3Nhc3NQbHVnaW4oKV1cbi8vIH0pXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWlXLFNBQVMsb0JBQW9CO0FBQzlYLFNBQVMsa0JBQWtCO0FBQzNCLFlBQVksWUFBWTtBQUV4QixJQUFNLGlCQUF1QztBQUFBO0FBQUEsRUFFekMsU0FBUztBQUFBO0FBQUEsSUFFTDtBQUFBO0FBQUEsTUFFSSxPQUFPO0FBQUE7QUFBQSxNQUVQLFdBQVc7QUFBQTtBQUFBLE1BRVgsY0FBYztBQUFBLElBQ2xCO0FBQUEsSUFDQTtBQUFBO0FBQUEsTUFFSSxNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxXQUFXO0FBQUEsSUFDZjtBQUFBLElBQ0E7QUFBQSxNQUNJLE9BQU87QUFBQSxJQUNYO0FBQUEsRUFDSjtBQUFBO0FBQUEsRUFFQSxjQUFjO0FBQUE7QUFBQSxFQUVkLEtBQUs7QUFBQSxFQUNMLG1CQUFtQixDQUFDLFdBQVcsQ0FBQztBQUVwQztBQUVBLElBQU8sc0JBQVEsYUFBYSxZQUFVO0FBQ3BDLFFBQU0sV0FBVyxDQUFDLENBQUMsT0FBTztBQUUxQixRQUFNLGNBQXFCLDBCQUFtQixnQkFBZ0IsUUFBUTtBQUV0RSxNQUFJLENBQUMsVUFBVTtBQUNYLFVBQU0saUJBQXdCLDhCQUF1QixXQUFXO0FBRWhFLFlBQVEsSUFBSTtBQUFBO0FBQUEsRUFBcUIsS0FBSyxVQUFVLGdCQUFnQixNQUFNLENBQUMsQ0FBQztBQUFBO0FBQUEsQ0FBTTtBQUs5RSxJQUFPLHdCQUFpQixjQUFjO0FBQUEsRUFDMUM7QUFFQSxTQUFjLDJCQUFvQixXQUFXO0FBQy9DLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
